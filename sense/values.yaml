global:
  imagePullSecret: docker.secret

  environment: openshift
  domain: staging.deciphernow.com
  route_url_name: greymatter
  remove_namespace_from_url: false
  zone: zone-default-zone
  mesh_tls:
    enabled: true
    use_provided_certs: true
    # This is the DN of the cert being used in the mesh. The Helm charts will add whitelist the DN throughout the mesh
    dn: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=*.greymatter.svc.cluster.local
  # Turns on tls for control api and configures control to talk to it using tls
  control_api_tls: true
  kafka:
    replicas: 3
  dashboard:
    version: 3.3.1
    sidecar:
      version: latest
  catalog:
    version: latest
    sidecar:
      version: latest
  sense:
    enabled: false
  consul:
    enabled: false
    host: ''
    port: 8500
  edge:
    enableTLS: true
    # This is the DN of the new certificate issued to the edge for internal mesh communication. It needs to be whitelisted by the proxies
    egressDn: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge
    certPath: /etc/proxy/tls/edge
    version: 1.1.1
  spire:
    enabled: false
  waiter:
    serviceAccount:
      create: true
      name: waiter-sa
  control:
    # This specifies the service name that all XDS clients will try to connect to
    name: control
    port: 50000
    version: latest
  data:
    jwt_prefix: '/jwt'
  internal-data:
    jwt_prefix: '/jwt'
  sidecar:
    version: latest
  services:
    catalog:
      egressTLS: true
      mTLS: true
      version: 1.0.3
    dashboard:
      egressTLS: true
      mTLS: true
    prometheus:
      egressTLS: false
      mTLS: true
    data:
      egressTLS: true
      mTLS: true
    internal-data:
      egressTLS: true
      mTLS: true
    jwt:
      egressTLS: true
      mTLS: true
    internal-jwt:
      egressTLS: true
      mTLS: true
    slo:
      egressTLS: true
      mTLS: true
    control:
      egressTLS: false
      mTLS: true
    controlApi:
      # This value must match global.control_api_tls
      egressTLS: true

  sidecar:
    version: latest
    envvars:
      # You can customize the sidecar environment variables mesh-wide to enable features in the mesh
      # All the sidecar envvars are documented in `./greymatter/README.md`, and the custom service-level defaults are documented in the services `configuration.md` files.
      # These are sorted by how different the values are for the sidecars running on different services. The options are "all the same", "all except XDS". and "different"
      # TODO: update each service to use default global values and only set the ones that are different.
      # All the same
      proxy_dynamic:
        type: 'value'
        value: 'true'
      xds_zone:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      xds_cluster:
        type: 'value'
        value: ''
      xds_host:
        type: 'value'
        value: 'control.{{ .Release.Namespace }}.svc'
      xds_port:
        type: 'value'
        value: '{{ .Values.global.control.port }}'
      xds_node_id:
        type: 'value'
        value: 'default'
      envoy_admin_log_path:
        type: 'value'
        value: '/dev/stdout'
      # There may be more sidecar environment variables, but we haven't added them here yet.
      # However, to use an env var with the sidecar, even if it doesn't have a global default,
      # it needs to be set globally as either a value or a secret

catalog:
  catalog:
    envvars:
      config_source:
        type: value
        value: 'gmdata'
      config_polling_interval:
        type: value
        value: '30s'
      instance_polling_interval:
        type: value
        value: '5s'
      instance_max_silence:
        type: value
        value: '15s'
      metrics_max_retries:
        type: value
        value: '3'
      metrics_retry_delay:
        type: value
        value: '10s'
      metrics_request_timeout:
        type: value
        value: '15s'
      port:
        type: value
        value: '9080'
      control_server_0_address:
        type: value
        value: '{{ .Values.global.control.name }}.{{ .Release.Namespace }}.svc:{{ .Values.global.control.port }}'
      control_server_0_zone_name:
        type: value
        value: '{{ .Values.global.zone }}'
      control_server_0_request_cluster_name:
        type: value
        value: 'edge'
      use_tls:
        type: value
        value: 'true'
      ca_cert_path:
        type: value
        value: '/etc/pki/ca.crt'
      server_cert_path:
        type: value
        value: '/etc/pki/server.crt'
      server_key_path:
        type: value
        value: '/etc/pki/server.key'
      client_address:
        type: value
        value: localhost
      client_port:
        type: value
        value: '8080'
      client_prefix:
        type: value
        value: '/data'
      client_use_tls:
        type: value
        value: 'true'
      client_cert:
        type: secret
        secret: sidecar-certs
        key: server_b64
      client_key:
        type: secret
        secret: sidecar-certs
        key: key_b64
      client_trust:
        type: secret
        secret: sidecar-certs
        key: ca_b64
      gmdata_startup_delay:
        type: value
        value: '10s'
      gmdata_max_retries:
        type: value
        value: '100'
      gmdata_retry_delay:
        type: value
        value: '5s'
      gmdata_root_event_name:
        type: value
        value: 'world'
      client_identity:
        type: value
        value: 'C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=*.greymatter.svc.cluster.local'
      client_email:
        type: value
        value: 'engineering@deciphernow.com'

    init:
      image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:latest'
      envvars:
        debug:
          type: value
          value: 'true'

  sidecar:
    image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:latest'
    create_sidecar_secret: false
    envvars:
      xds_cluster:
        type: value
        value: 'catalog'

dashboard:
  dashboard:
    image: 'docker.production.deciphernow.com/deciphernow/gm-dashboard:3.3.1'
    ssl:
      enabled: true
      mountPoint: /certs
      name: dashboard-certs
  sidecar:
    image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:latest'
    create_sidecar_secret: false
    envvars:
      xds_cluster:
        type: value
        value: 'dashboard'
  sidecar_prometheus:
    image: 'docker-dev.production.deciphernow.com/deciphernow/gm-proxy:latest'
  prometheus:
    pvcSize: 80
    serviceAccount:
      create: true
    resources:
      requests:
        memory: '1Gi'
        cpu: '1'
      limits:
        memory: '1Gi'
        cpu: '2'
        
slo: 
  slo:
    image: docker.production.deciphernow.com/deciphernow/gm-slo:1.1.1
    secret:
      secret_name: slo-certs
      mountPoint: /service-certs
      secretKeys:
        ca: ca.crt
        cert: service.crt
        key: service.key
  postgres:
    rds:
      enabled: false
      endpoint:
    secret:
      secret_name: postgres-ssl-certs
      mountPoint: /certs
      secretKeys:
        ca: ca.pem
        cert: server.crt
        key: server.key
    private_image: true
    data_mount_point: /var/lib/pgsql/data
    envvars:
      - type: secret
        name: postgresql_user
        secret: postgres-credentials
        key: username
      - type: secret
        name: POSTGRESQL_PASSWORD
        secret: postgres-credentials
        key: password
      - type: value
        name: POSTGRES_USER_CN
        value: CN=*.greymatter.svc, OU=Engineering, O=Decipher Technology Studios, L=Alexandria, ST=Virginia, C=US
      - type: secret
        name: POSTGRESQL_DATABASE
        secret: postgres-credentials
        key: database